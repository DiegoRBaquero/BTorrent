// Generated by CoffeeScript 1.10.0
var app, client, debug, opts, ref, trackers;

trackers = [['udp://tracker.openbittorrent.com:80'], ['udp://tracker.internetwarriors.net:1337'], ['udp://tracker.leechers-paradise.org:6969'], ['udp://tracker.coppersurfer.tk:6969'], ['udp://exodus.desync.com:6969'], ['udp://9.rarbg.com:2710/announce'], ['udp://tracker.publicbt.com:80/announce'], ['udp://coppersurfer.tk:6969/announce'], ['udp://tracker4.piratux.com:6969/announce'], ['udp://open.demonii.com:1337/announce'], ['udp://glotorrents.pw:6969/announce'], ['wss://tracker.webtorrent.io'], ['wss://tracker.btorrent.xyz']];

opts = {
  announce: trackers
};

client = new WebTorrent().on('error', function(err) {
  return console.error(err);
}).on('torrent', function(torrent) {
  return console.log('torrent is ready');
});

debug = (ref = window.localStorage) != null ? ref : window.localStorage.getItem('debug') === {
  '*': false
};

app = angular.module('bTorrent', ['ngFileUpload', 'ui.bootstrap'], [
  '$compileProvider', '$locationProvider', function($compileProvider, $locationProvider) {
    $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|magnet|blob|javascript):/);
    return $locationProvider.html5Mode({
      enabled: true,
      requireBase: false
    }).hashPrefix('#');
  }
]);

app.controller('ModalCtrl', [
  '$scope', function($scope) {
    return console.log('hello');
  }
]);

app.controller('bTorrentCtrl', [
  'Upload', '$uibModal', '$scope', '$http', '$log', '$location', function(Upload, $uibModal, $scope, $http, $log, $location) {
    var dbg, updateAll;
    $scope.client = client;
    $scope.seedIt = true;
    dbg = function(string, torrent) {
      if (debug) {
        if (torrent) {
          $log.debug('%c' + torrent.name + ' (' + torrent.infoHash + '): %c' + string, 'color: #33C3F0', 'color: #333');
          return;
        } else {
          $log.debug('%cClient: %c' + string, 'color: #33C3F0', 'color: #333');
          return;
        }
      }
    };
    updateAll = function() {
      $scope.$apply();
    };
    setInterval(updateAll, 500);
    $scope.client.done = function() {
      var done;
      done = true;
      $scope.client.torrents.forEach(function(torrent) {
        if (!torrent.done) {
          done = false;
        }
      });
      return done;
    };
    $scope.client.downloading = function() {
      var downloading;
      downloading = true;
      $scope.client.torrents.forEach(function(torrent) {
        if (torrent.done) {
          downloading = false;
        }
      });
      return downloading;
    };
    $scope.uploadSeed = function(file) {
      $scope.client.processing = true;
      dbg('Seeding ' + file.name);
      $scope.client.seed(file, opts, $scope.onSeed);
    };
    $scope.openCreateModal = function() {
      var modalInstance;
      modalInstance = $uibModal.open({
        animation: true,
        templateUrl: 'create-modal.html'
      });
      return modalInstance.result.then((function(selectedItem) {
        $scope.selected = selectedItem;
      }), function() {
        $log.info('Modal dismissed at: ' + new Date);
      });
    };
    $scope.uploadTorrent = function(file) {
      $scope.client.processing = true;
      dbg('Adding ') + file.name;
      $scope.client.add(file, opts, $scope.onTorrent);
      $scope.magnetLinkInput = '';
    };
    $scope.addByMagnet = function() {
      if ($scope.magnetLinkInput && $scope.magnetLinkInput.length) {
        $scope.client.processing = true;
        $scope.magnetLinkInput += '';
        dbg('Adding magnetLinkInput: ' + $scope.magnetLinkInput);
        $scope.client.add($scope.magnetLinkInput, opts, $scope.onTorrent);
        $scope.magnetLinkInput = '';
      }
    };
    $scope.toggleTorrent = function(torrent) {
      if (torrent.showFiles) {
        torrent.showFiles = false;
        $scope.sTorrent = null;
      } else {
        $scope.client.torrents.forEach(function(t) {
          return t.showFiles = false;
        });
        torrent.showFiles = true;
        $scope.sTorrent = torrent;
      }
    };
    $scope.pauseTorrent = function(torrent) {
      if (!torrent.destroyed && !torrent.done && !torrent.paused) {
        torrent.pause();
      }
    };
    $scope.resumeTorrent = function(torrent) {
      if (!torrent.destroyed && !torrent.done && torrent.paused) {
        torrent.resume();
      }
    };
    $scope.destroyedTorrent = function(err) {
      $scope.client.processing = false;
      if (err) {
        throw err;
      }
      dbg('Destroyed torrent');
    };
    $scope.onTorrent = function(torrent, isSeed) {
      if (!isSeed) {
        $scope.client.processing = false;
      }
      torrent.pSize = torrent.length;
      torrent.showFiles = false;
      torrent.fileName = torrent.name + '.torrent';
      torrent.oTorrentFileURL = torrent.torrentFileURL;
      if (angular.isUndefined($scope.sTorrent) || $scope.sTorrent === null) {
        $scope.sTorrent = torrent;
        torrent.showFiles = true;
      }
      dbg('onTorrent');
      torrent.update = function() {
        var remaining;
        if (this.pieces) {
          torrent.pProgress = (100 * torrent.progress).toFixed(1);
          if (torrent.done) {
            torrent.tRemaining = 'Done';
          } else {
            remaining = moment.duration(torrent.timeRemaining / 1000, 'seconds').humanize();
            torrent.tRemaining = remaining[0].toUpperCase() + remaining.substr(1);
          }
        } else {

        }
      };
      torrent.files.forEach(function(file) {
        file.pSize = file.length;
        file.status = 'Downloading';
        file.url = 'javascript: return false;';
        file.getBlobURL(function(err, url) {
          if (err) {
            throw err;
          }
          if (isSeed) {
            $scope.client.processing = false;
          }
          file.url = url;
          if (!isSeed) {
            dbg('Finished downloading file ' + file.name, torrent);
          }
          file.status = 'Ready';
        });
        if (!isSeed) {
          dbg('Received file ' + file.name + ' metadata', torrent);
        }
      });
      torrent.on('download', function(chunkSize) {
        if (!isSeed) {
          dbg('Downloaded chunk', torrent);
        }
      });
      torrent.on('upload', function(chunkSize) {
        dbg('Uploaded chunk', torrent);
      });
      torrent.on('done', function() {
        if (!isSeed) {
          dbg('Done', torrent);
          return;
        }
        torrent.update();
      });
      torrent.on('wire', function(wire, addr) {
        dbg('Wire ' + addr, torrent);
      });
      setInterval(torrent.update, 500);
      torrent.update();
    };
    $scope.onSeed = function(torrent) {
      $scope.onTorrent(torrent, true);
    };
    if ($location.hash() !== '') {
      $scope.client.processing = true;
      dbg('Adding ' + $location.hash());
      client.add($location.hash(), $scope.onTorrent);
    }
  }
]);

app.filter('html', [
  '$sce', function($sce) {
    return function(input) {
      $sce.trustAsHtml(input);
    };
  }
]);

app.filter('pbytes', function() {
  return function(num) {
    var exponent, neg, unit, units;
    if (isNaN(num)) {
      return '';
    }
    exponent = void 0;
    unit = void 0;
    neg = num < 0;
    units = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    if (neg) {
      num = -num;
    }
    if (num < 1) {
      return (neg ? '-' : '') + num + ' B';
    }
    exponent = Math.min(Math.floor(Math.log(num) / Math.log(1000)), 8);
    num = (num / Math.pow(1000, exponent)).toFixed(1) * 1;
    unit = units[exponent];
    return (neg ? '-' : '') + num + ' ' + unit;
  };
});
